colorscheme molokai

set rtp+=/usr/bin/fzf
"set rtp+=/usr/local/opt/fzf

"VIM user interface
syntax on
filetype plugin indent on

autocmd BufNewFile,BufReadPost *.cljx setfiletype clojure
autocmd BufNewFile,BufReadPost *.cljs setfiletype clojure
autocmd BufWritePre * :%s/\s\+$//e
au BufNewFile,BufRead *.bnf set filetype=bnf
au BufNewFile,BufRead *.ebnf set filetype=ebnf

set ruler "a;ways show current position
set hid   "hide abandoned buffer
set modelines=0
set autoindent
set tabstop=2 shiftwidth=2 expandtab
set smarttab
set bs=2
set relativenumber
set showmatch
set hlsearch "hilights search results
set incsearch
set magic "for regular expressions
set noerrorbells
set novisualbell
set wildmenu

" COLORs and Fonts
"syntax enable
set encoding=utf8

"Files, backups and undo
set nobackup
set nowb
set noswapfile
set autoread

" set numbering
:au FocusLost * :set number
:au FocusGained * :set relativenumber

" airline settings
let g:airline_theme='powerlineish'
let g:airline#extensions#tabline#enabled = 1

" Keyboard mappings
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'up': '~30%' }

" In Neovim, you can set up fzf window using a Vim command
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_layout = { 'window': '-tabnew' }
let g:fzf_layout = { 'window': '10split enew' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

nnoremap <silent> <c-p> :FZF<CR>
nnoremap <silent> <Leader>f :Rg<CR>
" RUST related confs

let g:rustfmt_autosave = 1
set hidden

" RSpec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" Ale configs
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" let g:ale_ruby_rubocop_executable = 'bin/rubocop'
let g:ale_ruby_rubocop_executable = 'bundle'
let g:ale_ruby_rubocop_options = '-D'
let g:ale_linter_aliases = {'vue': ['vue', 'javascript']}
let g:ale_linters = {'vue': ['eslint', 'vls'], 'ruby': ['rubocop']}
